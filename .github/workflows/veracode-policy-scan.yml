name: Veracode Static Policy Scanner

on:
  push:
  pull_request:
    branches: [main]
  workflow_call:
    inputs:
      profile_name: 
      string: VeraDemo
#        required: true
  #      type: string
  
jobs:
  policy_scan:
    runs-on: ubuntu-latest
    name: policy scan

    steps:
      - name: checkout repo
        uses: actions/checkout@v3
      
      # get the compiled binary from a previous job
      - name: Build with Maven
        run: mvn -B package --file ./app/pom.xml
        #with:
         # name: verademo.war
        #  path: ./app/target/
          
      - name: Get the name of the downloaded files
        run: |
          artifact_file=$(ls -1 ./veracode_artifact_directory | head -n 1)
          echo "veracode_artifact=$artifact_file" >> $GITHUB_ENV
      # run the policy scan action
      - name: Veracoe Upload and Scan Action Step
        uses: veracode/veracode-uploadandscan-action@0.2.5
        id: upload_and_scan
        with:
          appname: ${{ inputs.profile_name }}
          createprofile: true
          version: '${{ github.run_id }}'
          filepath: ./veracode_artifact_directory/${{ env.veracode_artifact }}
          vid: '${{ secrets.VERACODE_API_ID }}'
          vkey: '${{ secrets.VERACODE_API_KEY }}'
          scanpollinginterval: 30
          scantimeout: 15
        continue-on-error: true
        
  get-policy-flaws:
    runs-on: ubuntu-latest
    needs: policy_scan
    container:
      image: veracode/api-signing:latest
    steps:
      # Note: this will only work up to about 500 flaws
      #		due to Veracode results limiting
      # See the get_flaws.sh script in the helpers directory
      #		for a more elaborate method
      - name: get policy flaws
        run: |
          cd /tmp
          export VERACODE_VERACODE_API_KEY_ID=${{ secrets.VERACODE_API_ID }}
          export VERACODE_VERACODE_API_KEY_SECRET=${{ secrets.VERACODE_API_KEY }}
          guid=$(http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v1/applications?name=${{ github.event.client_payload.profile_name }}" | jq -r '._embedded.applications[] | select(.profile.name == "${{ github.event.client_payload.profile_name }}") | .guid')
          echo GUID: ${guid}
          total_flaws=$(http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v2/applications/${guid}/findings?scan_type=STATIC&violates_policy=True" | jq -r '.page.total_elements')
          echo TOTAL_FLAWS: ${total_flaws}
          http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v2/applications/${guid}/findings?scan_type=STATIC&violates_policy=True&size=${total_flaws}" > policy_flaws.json
          results_url=$(http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v1/applications/${guid}" | jq -r '.results_url')
          echo "https://analysiscenter.veracode.com/auth/index.jsp#${results_url}" > results_url.txt     
      - name: save results file
        uses: actions/upload-artifact@v3
        with:
          name: policy-flaws
          path: |
            /tmp/policy_flaws.json
            /tmp/results_url.txt
      - name: fail the pipeline for compliance
        run: |
          export VERACODE_VERACODE_API_KEY_ID=${{ secrets.VERACODE_API_ID }}
          export VERACODE_VERACODE_API_KEY_SECRET=${{ secrets.VERACODE_API_KEY }}
          guid=$(http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v1/applications?name=${{ github.event.client_payload.profile_name }}" | jq -r '._embedded.applications[] | select(.profile.name == "${{ github.event.client_payload.profile_name }}") | .guid')
          echo GUID: ${guid}
          total_flaws=$(http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v2/applications/${guid}/findings?scan_type=STATIC&violates_policy=True" | jq -r '.page.total_elements')
          if [ ${total_flaws} -gt 0 ]; then
            echo "Compliance not met, pipeline fails"
            exit 1
          else
            echo "Compliance met, pipeline continues"
          fi
